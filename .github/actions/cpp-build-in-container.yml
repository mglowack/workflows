on:
  workflow_call:
    inputs:
      build_types:
        required: true
        type: string
      compilers:
        required: true
        type: string
env:
  REGISTRY: ghcr.io
  IMAGE_TAG: ghcr.io/${{ github.repository }}

jobs:
  build-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry "${{ env.REGISTRY }}"
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  build-source:
    needs: build-image
    runs-on: ubuntu-latest

    container:
      image: ghcr.io/${{ github.repository }}
      credentials:
       username: ${{ github.actor }}
       password: ${{ secrets.GITHUB_TOKEN }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        # array inputs not supported: https://github.com/orgs/community/discussions/11692
        build_type: ${{ fromJson(inputs.build_types) }}
        compiler: ${{ fromJson(inputs.compilers) }}

    steps:
    - run: pwd

    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure
      # Build your program with the given configuration
      run: >
        cmake
        .
        -B build/${{ matrix.cpp_compiler }}/${{ matrix.build_type }}
        -G Ninja
        -DCMAKE_CXX_COMPILER=${{ matrix.compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build build/${{ matrix.cpp_compiler }}/${{ matrix.build_type }}
      #--config ${{ env.BUILD_TYPE }}

    - name: Test
      working-directory: ${{ github.workspace }}/build/${{ matrix.cpp_compiler }}/${{ matrix.build_type }}
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{ matrix.build_type }}
